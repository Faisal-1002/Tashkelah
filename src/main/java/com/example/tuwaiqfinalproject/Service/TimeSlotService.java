package com.example.tuwaiqfinalproject.Service;

import com.example.tuwaiqfinalproject.Api.ApiException;
import com.example.tuwaiqfinalproject.Model.*;
import com.example.tuwaiqfinalproject.Repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class TimeSlotService {

    private final TimeSlotRepository timeSlotRepository;
    private final PlayerRepository playerRepository;
    private final PublicMatchRepository publicMatchRepository;
    private final FieldRepository fieldRepository;


    public List<TimeSlot> getAllTimeSlots() {
        return timeSlotRepository.findAll();
    }

    public TimeSlot getTimeSlotById(Integer id) {
        TimeSlot timeSlot = timeSlotRepository.findTimeSlotById(id);
        if (timeSlot == null)
            throw new ApiException("TimeSlot not found");
        return timeSlot;
    }

    // Faisal - Add Time slots for a given field and date
    public void createFullDayTimeSlots(Integer fieldId, LocalDate date) {
        Field field = fieldRepository.findFieldById(fieldId);
        if (field == null) {
            throw new ApiException("Field not found");
        }

        List<TimeSlot> timeSlots = new ArrayList<>();

        for (int hour = field.getOpen_time().getHour(); hour < field.getClose_time().getHour(); hour++) {
            LocalTime start = LocalTime.of(hour, 0);
            LocalTime end = LocalTime.of(hour + 1, 0);

            TimeSlot slot = new TimeSlot();
            slot.setField(field);
            slot.setDate(date);
            slot.setStart_time(start);
            slot.setEnd_time(end);
            slot.setStatus("AVAILABLE");
            slot.setPrice(field.getPrice());

            timeSlots.add(slot);
        }
        timeSlotRepository.saveAll(timeSlots);
    }

    public void addTimeSlotWithPublicMatch(TimeSlot timeSlot,Integer publicMatchId,Integer fieldId) {
        PublicMatch publicMatch=publicMatchRepository.findPublicMatchById(publicMatchId);
        if (publicMatch == null){
            throw new ApiException("TimeSlot not found");}
        Field field=fieldRepository.findFieldById(fieldId);
        if (field == null){
            throw new ApiException("TimeSlot not found");}
        timeSlot.setField(field);
        timeSlot.setPublic_match(publicMatch);
        timeSlotRepository.save(timeSlot);
    }

    public void updateTimeSlot(Integer id, TimeSlot updatedSlot) {
        TimeSlot existing = timeSlotRepository.findTimeSlotById(id);
        if (existing == null)
            throw new ApiException("TimeSlot not found");

        updatedSlot.setId(existing.getId());
        timeSlotRepository.save(updatedSlot);
    }

    public void deleteTimeSlot(Integer id) {
        TimeSlot timeSlot = timeSlotRepository.findTimeSlotById(id);
        if (timeSlot == null)
            throw new ApiException("TimeSlot not found");
        timeSlotRepository.delete(timeSlot);
    }

    // 25. Faisal - Time slots for the assign filed - Tested
    public List<TimeSlot> getTimeSlotsForPrivateMatchField(Integer userId, LocalDate date) {
        Player player = playerRepository.findPlayerById(userId);
        if (player == null)
            throw new ApiException("Player not found");

        PrivateMatch match = player.getPrivate_match();
        if (match == null || !match.getStatus().equals("CREATED"))
            throw new ApiException("Private match not found or its status is not CREATED");

        Field field = match.getField();
        if (field == null)
            throw new ApiException("No field assigned to this match");

        return timeSlotRepository.findValidSlotsByFieldAndDate(
                field.getId(),
                date,
                field.getOpen_time(),
                field.getClose_time()
        );
    }

    //Taha ---------------------------
    // This method runs automatically every day at midnight (00:00)
// It creates 24 time slots (1 per hour) for each field in the system
//    @Scheduled(cron = "0 0 0 * * ?") // Every day at 00:00 (midnight)
//    public void autoGenerateDailyTimeSlots() {
//        // Get all fields from the database
//        List<Field> fields = fieldRepository.findAll();
//
//        // Generate time slots for each field for today's date
//        for (Field field : fields) {
//            generateTimeSlotsForFieldAndDate(field, LocalDate.now());
//        }
//    }
//
//    // This method creates 24 hourly time slots for a specific field and date
//    public void generateTimeSlotsForFieldAndDate(Field field, LocalDate date) {
//        // If time slots already exist for this field and date, do nothing
//        if (timeSlotRepository.existsByFieldAndDate(field, date)) {
//            return;
//        }
//
//        List<TimeSlot> slots = new ArrayList<>();
//
//        // Loop from hour 0 to hour 23 (to create 24 slots)
//        for (int hour = 0; hour < 24; hour++) {
//            // Start time is the current hour (e.g., 00:00, 01:00, etc.)
//            LocalTime start = LocalTime.of(hour, 0);
//
//            // End time is one hour after start, or 23:59 for the last hour
//            LocalTime end = (hour == 23) ? LocalTime.of(23, 59) : LocalTime.of(hour + 1, 0);
//
//            // Create a new time slot and set its properties
//            TimeSlot slot = new TimeSlot();
//            slot.setDate(date);                         // The day this slot is for
//            slot.setStart_time(start);                  // Start of the slot
//            slot.setEnd_time(end);                      // End of the slot
//            slot.setPrice(field.getPrice());            // Use field's default price
//            slot.setStatus("AVAILABLE");                // Set status to available
//            slot.setField(field);                       // Link to the corresponding field
//
//            // Add the time slot to the list
//            slots.add(slot);
//        }
//
//        // Save all 24 time slots to the database in one batch
//        timeSlotRepository.saveAll(slots);
//    }







    //Taha --------------------------------------------
    public void generateTimeSlotsForFieldOnDate(Integer fieldId, LocalDate date) {
        // Get the field by ID
        Field field = fieldRepository.findById(fieldId)
                .orElseThrow(() -> new ApiException("Field not found"));

        // Generate time slots for that field on the given date (Here we generate for every hour)
        List<TimeSlot> timeSlots = new ArrayList<>();
        LocalTime startTime = LocalTime.of(0, 0); // Start from midnight
        LocalTime endTime = startTime.plusHours(1); // Each slot is 1 hour

        // Create slots from midnight till the end of the day (24 hours)
        for (int i = 0; i < 24; i++) {
            TimeSlot slot = new TimeSlot();
            slot.setField(field);
            slot.setDate(date);
            slot.setStart_time(startTime);
            slot.setEnd_time(endTime);
            slot.setStatus("AVAILABLE");
            slot.setPrice(100.0); // Example price, you can customize it

            timeSlots.add(slot);

            // Move to the next hour
            startTime = startTime.plusHours(1);
            endTime = endTime.plusHours(1);
        }

        // Save all generated time slots in the database
        timeSlotRepository.saveAll(timeSlots);
    }
}
